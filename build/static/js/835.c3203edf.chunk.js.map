{"version":3,"file":"static/js/835.c3203edf.chunk.js","mappings":"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","sources":["services/environmentService.js","services/api/nakshatraService.js","components/freeServices/panchangReportSection/Nakshatra.jsx"],"sourcesContent":["class EnvironmentService {\n  // Hardcoded fallback credentials (for development ONLY)\n  static FALLBACK_CREDENTIALS = {\n    REACT_APP_ASTROLOGY_USER_ID: '636470',\n    REACT_APP_ASTROLOGY_API_KEY: 'f18878ae6d3e7627238b03d4d53999548576e4c1'\n  }\n\n  /**\n   * Safely retrieve an environment variable\n   * @param {string} key - Environment variable key\n   * @param {*} [defaultValue] - Optional default value\n   * @returns {string} Environment variable value\n   */\n  static get(key, defaultValue = '') {\n    // First, check process.env\n    const envValue = process.env[key]\n    \n    // If environment variable exists, return it\n    if (envValue) return envValue\n\n    // Check fallback credentials\n    if (this.FALLBACK_CREDENTIALS[key]) {\n      console.warn(`[ENV] Using fallback value for ${key}`)\n      return this.FALLBACK_CREDENTIALS[key]\n    }\n\n    // If no value found, return default\n    if (defaultValue !== '') {\n      console.warn(`[ENV] Using default value for ${key}`)\n      return defaultValue\n    }\n\n    console.warn(`[ENV] No value found for ${key}`)\n    return ''\n  }\n\n  /**\n   * Validate required environment variables\n   * @param {string[]} requiredVars - List of required environment variables\n   * @throws {Error} If any required variables are missing\n   */\n  static validate(requiredVars) {\n    const missingVars = requiredVars.filter(\n      varName => !this.get(varName)\n    )\n\n    if (missingVars.length > 0) {\n      console.warn('[ENV] Using fallback credentials for missing variables')\n      return true // Allow fallback in development\n    }\n\n    return true\n  }\n\n  /**\n   * Load configuration for a specific service\n   * @param {string[]} requiredVars - List of required variables\n   * @returns {Object} Configuration object\n   */\n  static loadConfig(requiredVars) {\n    // Validate and allow fallback\n    this.validate(requiredVars)\n    \n    return requiredVars.reduce((config, varName) => {\n      const configKey = this.convertKeyToConfigKey(varName)\n      config[configKey] = this.get(varName)\n      return config\n    }, {})\n  }\n\n  /**\n   * Convert environment variable key to camelCase config key\n   * @param {string} key - Environment variable key\n   * @returns {string} Converted config key\n   */\n  static convertKeyToConfigKey(key) {\n    return key\n      .replace(/^REACT_APP_/, '')\n      .toLowerCase()\n      .split('_')\n      .map((word, index) => \n        index === 0 \n          ? word \n          : word.charAt(0).toUpperCase() + word.slice(1)\n      )\n      .join('')\n  }\n\n  /**\n   * Check if running in development mode\n   * @returns {boolean} True if in development mode\n   */\n  static isDevelopment() {\n    return process.env.NODE_ENV === 'development'\n  }\n}\n\nexport default EnvironmentService\n","import axios from 'axios'\nimport EnvironmentService from '../environmentService'\n\nclass NakshatraService {\n  // API Configuration\n  static API_CONFIG = {\n    BASE_URL: 'https://json.astrologyapi.com/v1/daily_nakshatra_prediction',\n    REQUIRED_VARS: [\n      'REACT_APP_ASTROLOGY_USER_ID', \n      'REACT_APP_ASTROLOGY_API_KEY'\n    ],\n    TIMEOUT: 15000, // 15 seconds\n    FALLBACK_LOCATION: {\n      lat: 19.132,\n      lon: 72.342,\n      tzone: 5.5\n    }\n  }\n\n  /**\n   * Fetch Nakshatra prediction\n   * @param {Object} params - Prediction parameters\n   * @returns {Promise<Object>} Transformed Nakshatra prediction data\n   */\n  static async fetchPrediction(params = {}) {\n    try {\n      // Load configuration with fallback\n      const config = EnvironmentService.loadConfig(this.API_CONFIG.REQUIRED_VARS)\n\n      // Prepare default parameters\n      const defaultParams = {\n        day: new Date().getDate(),\n        month: new Date().getMonth() + 1,\n        year: new Date().getFullYear(),\n        hour: new Date().getHours(),\n        min: new Date().getMinutes(),\n        ...this.API_CONFIG.FALLBACK_LOCATION\n      }\n\n      // Merge default and provided parameters\n      const requestParams = { ...defaultParams, ...params }\n\n      // Prepare authentication\n      const auth = `Basic ${btoa(`${config.astrologyUserId}:${config.astrologyApiKey}`)}`\n\n      // Make API request\n      const response = await axios.post(\n        this.API_CONFIG.BASE_URL,\n        requestParams,\n        {\n          headers: {\n            'Authorization': auth,\n            'Content-Type': 'application/json',\n            'Accept-Language': 'en'\n          },\n          timeout: this.API_CONFIG.TIMEOUT\n        }\n      )\n\n      // Validate response\n      if (!response.data) {\n        throw new Error('No data received from Astrology API')\n      }\n\n      // Transform API response\n      return this.transformPrediction(response.data)\n    } catch (error) {\n      // Standardized error handling\n      this.handleError(error)\n    }\n  }\n\n  /**\n   * Transform raw API response to standardized format\n   * @param {Object} rawData - Raw API response\n   * @returns {Object} Transformed prediction data\n   */\n  static transformPrediction(rawData) {\n    return {\n      id: Date.now(),\n      date: rawData.prediction_date || new Date().toLocaleDateString(),\n      icon: 'FaMoon',\n      color: 'bg-purple-100 text-purple-800',\n      description: `Nakshatra Insights for ${rawData.birth_moon_nakshatra || 'Unknown'}`,\n      details: [\n        { \n          label: 'Birth Moon Sign', \n          value: rawData.birth_moon_sign || 'Not Available', \n          icon: 'FaChartPie' \n        },\n        { \n          label: 'Nakshatra', \n          value: rawData.birth_moon_nakshatra || 'Not Available', \n          icon: 'FaMoon' \n        }\n      ],\n      prediction: rawData.prediction || {},\n      advice: this.generateAdvice(rawData)\n    }\n  }\n\n  /**\n   * Generate personalized advice based on prediction\n   * @param {Object} rawData - Raw prediction data\n   * @returns {string} Advice message\n   */\n  static generateAdvice(rawData) {\n    const predictions = rawData.prediction || {}\n    const adviceComponents = [\n      predictions.health && 'Focus on your well-being.',\n      predictions.profession && 'Stay motivated in your professional journey.',\n      predictions.personal_life && 'Nurture your personal relationships.',\n      'Embrace the day with positivity and mindfulness.'\n    ]\n\n    return adviceComponents.filter(Boolean).join(' ')\n  }\n\n  /**\n   * Standardized error handling\n   * @param {Error} error - Caught error\n   * @throws {Error} Processed error\n   */\n  static handleError(error) {\n    const errorDetails = {\n      message: error.response?.data?.message || error.message,\n      status: error.response?.status,\n      type: error.response ? 'API_ERROR' : 'NETWORK_ERROR',\n      isConfigurationError: !EnvironmentService.isDevelopment()\n    }\n\n    console.error('Nakshatra Prediction Error:', errorDetails)\n    \n    // In production, throw error. In development, log and continue\n    if (errorDetails.isConfigurationError) {\n      throw errorDetails\n    } else {\n      console.warn('Continuing in development mode with fallback credentials')\n    }\n  }\n}\n\nexport default NakshatraService\n","import React, { useState, useEffect, useCallback } from 'react'\nimport * as Icons from 'react-icons/fa'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport NakshatraService from '../../../services/api/nakshatraService'\n\n// Default Nakshatra Data\nconst DEFAULT_NAKSHATRA_DATA = {\n  id: Date.now(),\n  date: new Date().toLocaleDateString(),\n  icon: 'FaMoon',\n  color: 'bg-purple-100 text-purple-800',\n  description: 'Nakshatra Insights',\n  details: [\n    { \n      label: 'Birth Moon Sign', \n      value: 'Not Available', \n      icon: 'FaChartPie' \n    },\n    { \n      label: 'Nakshatra', \n      value: 'Not Available', \n      icon: 'FaMoon' \n    }\n  ],\n  prediction: {},\n  advice: 'Stay positive and embrace the day\\'s opportunities.'\n}\n\n// Prediction Categories Configuration\nconst PREDICTION_CATEGORIES = [\n  {\n    key: 'health',\n    icon: 'FaHeartbeat',\n    color: 'text-green-600',\n    bgColor: 'bg-green-50',\n    borderColor: 'border-green-200',\n    title: 'Health Prediction',\n    description: 'Insights into your physical well-being'\n  },\n  {\n    key: 'emotions',\n    icon: 'FaHeart',\n    color: 'text-pink-600',\n    bgColor: 'bg-pink-50',\n    borderColor: 'border-pink-200',\n    title: 'Emotional Insights',\n    description: 'Understanding your emotional landscape'\n  },\n  {\n    key: 'profession',\n    icon: 'FaBriefcase',\n    color: 'text-blue-600',\n    bgColor: 'bg-blue-50',\n    borderColor: 'border-blue-200',\n    title: 'Professional Outlook',\n    description: 'Career and work-related guidance'\n  },\n  {\n    key: 'luck',\n    icon: 'FaStar',\n    color: 'text-yellow-600',\n    bgColor: 'bg-yellow-50',\n    borderColor: 'border-yellow-200',\n    title: 'Luck and Opportunities',\n    description: 'Potential fortunate moments'\n  },\n  {\n    key: 'personal_life',\n    icon: 'FaHome',\n    color: 'text-purple-600',\n    bgColor: 'bg-purple-50',\n    borderColor: 'border-purple-200',\n    title: 'Personal Life',\n    description: 'Insights into personal relationships'\n  },\n  {\n    key: 'travel',\n    icon: 'FaRoad',\n    color: 'text-teal-600',\n    bgColor: 'bg-teal-50',\n    borderColor: 'border-teal-200',\n    title: 'Travel Insights',\n    description: 'Journey and exploration recommendations'\n  }\n]\n\nconst Nakshatra = () => {\n  // State Management with Default Data\n  const [nakshatraData, setNakshatraData] = useState(DEFAULT_NAKSHATRA_DATA)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [apiParams, setApiParams] = useState({\n    day: new Date().getDate(),\n    month: new Date().getMonth() + 1,\n    year: new Date().getFullYear(),\n    hour: new Date().getHours(),\n    min: new Date().getMinutes(),\n    lat: 19.132,\n    lon: 72.342,\n    tzone: 5.5\n  })\n\n  // Memoized Prediction Fetcher\n  const fetchNakshatraPrediction = useCallback(async () => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      // Fetch prediction using service\n      const predictionData = await NakshatraService.fetchPrediction(apiParams)\n      \n      // Merge with default data to ensure all properties exist\n      setNakshatraData({\n        ...DEFAULT_NAKSHATRA_DATA,\n        ...predictionData\n      })\n    } catch (fetchError) {\n      console.error('Nakshatra Prediction Fetch Error:', fetchError)\n      setError(fetchError)\n      \n      // Ensure we always have some data to render\n      setNakshatraData(DEFAULT_NAKSHATRA_DATA)\n    } finally {\n      setLoading(false)\n    }\n  }, [apiParams])\n\n  // Fetch data on component mount and when parameters change\n  useEffect(() => {\n    fetchNakshatraPrediction()\n  }, [fetchNakshatraPrediction])\n\n  // Handle date change\n  const handleDateChange = (event) => {\n    const selectedDate = new Date(event.target.value)\n    setApiParams(prev => ({\n      ...prev,\n      day: selectedDate.getDate(),\n      month: selectedDate.getMonth() + 1,\n      year: selectedDate.getFullYear()\n    }))\n  }\n\n  // Render Loading State\n  if (loading) {\n    return (\n      <div className='min-h-screen bg-gray-50 flex items-center justify-center'>\n        <div className='text-center'>\n          <motion.div\n            animate={{ rotate: 360 }}\n            transition={{ \n              repeat: Infinity, \n              duration: 1, \n              ease: \"linear\" \n            }}\n          >\n            <Icons.FaSpinner className='text-6xl text-indigo-600 mx-auto mb-4' />\n          </motion.div>\n          <p className='text-xl text-gray-700'>Loading Celestial Insights...</p>\n        </div>\n      </div>\n    )\n  }\n\n  // Render Error State\n  if (error) {\n    return (\n      <div className='min-h-screen bg-red-50 flex items-center justify-center'>\n        <div className='text-center max-w-md p-8 bg-white rounded-2xl shadow-2xl'>\n          <Icons.FaExclamationTriangle className='text-6xl text-red-600 mx-auto mb-6' />\n          <h2 className='text-2xl font-bold text-red-800 mb-4'>\n            Prediction Retrieval Error\n          </h2>\n          <p className='text-red-700 mb-6'>\n            {error.message || 'Unable to fetch Nakshatra predictions'}\n          </p>\n          <div className='flex justify-center space-x-4'>\n            <button \n              onClick={fetchNakshatraPrediction}\n              className='bg-red-500 text-white px-6 py-3 rounded-full hover:bg-red-600 transition flex items-center'\n            >\n              <Icons.FaSync className='mr-2' /> Retry\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Render Prediction Content\n  return (\n    <div className='min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8'>\n      <div className='max-w-4xl mx-auto bg-white shadow-2xl rounded-3xl overflow-hidden'>\n        {/* Header Section */}\n        <div className={`${nakshatraData.color} p-6 flex items-center justify-between`}>\n          <div className='flex items-center space-x-4'>\n            {React.createElement(Icons[nakshatraData.icon], { \n              className: 'text-4xl mr-4' \n            })}\n            <div>\n              <h2 className='text-2xl font-bold'>Nakshatra Insights</h2>\n              <p className='text-sm opacity-80'>Your celestial guidance</p>\n            </div>\n          </div>\n\n          {/* Date Selector */}\n          {/* <input \n            type='date'\n            onChange={handleDateChange}\n            className='bg-white/20 text-purple-800 rounded-full px-4 py-2 border border-purple-200 focus:outline-none'\n          /> */}\n        </div>\n\n        {/* Main Content */}\n        <AnimatePresence mode='wait'>\n          <motion.div \n            key={nakshatraData.id}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.3 }}\n            className='p-8 space-y-8'\n          >\n            {/* Birth Details */}\n            <div className='bg-gray-100 rounded-2xl p-6 border-l-4 border-indigo-500'>\n              <div className='flex justify-between items-center'>\n                <div>\n                  <h3 className='text-lg font-semibold text-gray-800 flex items-center'>\n                    <Icons.FaChartPie className='mr-2 text-indigo-600' />\n                    Birth Moon Sign: \n                    <span className='ml-2 text-indigo-700'>\n                      {nakshatraData.details[0].value}\n                    </span>\n                  </h3>\n                  <h4 className='text-md text-gray-600 flex items-center mt-2'>\n                    <Icons.FaMoon className='mr-2 text-purple-600' />\n                    Nakshatra: \n                    <span className='ml-2 text-purple-700'>\n                      {nakshatraData.details[1].value}\n                    </span>\n                  </h4>\n                </div>\n                <p className='text-sm text-gray-500'>\n                  Prediction Date: {nakshatraData.date}\n                </p>\n              </div>\n            </div>\n\n            {/* Prediction Categories */}\n            <div className='grid md:grid-cols-2 lg:grid-cols-3 gap-6'>\n              {PREDICTION_CATEGORIES.map((category) => {\n                const prediction = nakshatraData.prediction?.[category.key]\n                \n                return prediction ? (\n                  <motion.div \n                    key={category.key}\n                    whileHover={{ scale: 1.05 }}\n                    className={`\n                      ${category.bgColor} ${category.borderColor}\n                      border rounded-2xl p-5 \n                      transform transition duration-300 \n                      hover:shadow-lg\n                      flex flex-col\n                    `}\n                  >\n                    <div className='flex items-center mb-4'>\n                      {React.createElement(Icons[category.icon], { \n                        className: `mr-4 text-3xl ${category.color}` \n                      })}\n                      <div>\n                        <h4 className={`text-xl font-bold ${category.color}`}>\n                          {category.title}\n                        </h4>\n                        <p className='text-xs text-gray-500'>\n                          {category.description}\n                        </p>\n                      </div>\n                    </div>\n                    <p className='text-sm text-gray-700 flex-grow'>\n                      {prediction}\n                    </p>\n                  </motion.div>\n                ) : null\n              })}\n            </div>\n\n            {/* Advice Section */}\n            <div className='bg-blue-50 border-l-4 border-blue-500 p-6 rounded-2xl'>\n              <div className='flex items-center mb-4'>\n                <Icons.FaLightbulb className='text-yellow-500 mr-4 text-2xl' />\n                <h3 className='text-lg font-semibold text-gray-800'>\n                  Daily Guidance\n                </h3>\n              </div>\n              <p className='text-gray-700'>\n                {nakshatraData.advice}\n              </p>\n            </div>\n          </motion.div>\n        </AnimatePresence>\n      </div>\n\n    </div>\n  )\n}\n\nexport default Nakshatra"],"names":["EnvironmentService","get","key","defaultValue","arguments","length","undefined","envValue","process","this","FALLBACK_CREDENTIALS","console","warn","concat","validate","requiredVars","filter","varName","loadConfig","reduce","config","convertKeyToConfigKey","replace","toLowerCase","split","map","word","index","charAt","toUpperCase","slice","join","isDevelopment","REACT_APP_ASTROLOGY_USER_ID","REACT_APP_ASTROLOGY_API_KEY","NakshatraService","fetchPrediction","params","API_CONFIG","REQUIRED_VARS","defaultParams","_objectSpread","day","Date","getDate","month","getMonth","year","getFullYear","hour","getHours","min","getMinutes","FALLBACK_LOCATION","requestParams","auth","btoa","astrologyUserId","astrologyApiKey","response","axios","post","BASE_URL","headers","timeout","TIMEOUT","data","Error","transformPrediction","error","handleError","rawData","id","now","date","prediction_date","toLocaleDateString","icon","color","description","birth_moon_nakshatra","details","label","value","birth_moon_sign","prediction","advice","generateAdvice","predictions","health","profession","personal_life","Boolean","_error$response","_error$response$data","_error$response2","errorDetails","message","status","type","isConfigurationError","lat","lon","tzone","DEFAULT_NAKSHATRA_DATA","PREDICTION_CATEGORIES","bgColor","borderColor","title","Nakshatra","nakshatraData","setNakshatraData","useState","loading","setLoading","setError","apiParams","setApiParams","fetchNakshatraPrediction","useCallback","async","predictionData","fetchError","useEffect","_jsx","className","children","_jsxs","motion","div","animate","rotate","transition","repeat","Infinity","duration","ease","Icons","onClick","React","AnimatePresence","mode","initial","opacity","y","exit","category","_nakshatraData$predic","whileHover","scale"],"sourceRoot":""}