{"version":3,"file":"static/js/228.ab807b96.chunk.js","mappings":"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","sources":["components/freeServices/panchangReportSection/Yoga.jsx"],"sourcesContent":["import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport {\n  FaAsterisk,\n  FaExclamationTriangle,\n  FaSpinner,\n  FaStar,\n  FaCalendarAlt\n} from 'react-icons/fa'\n\n// API Configuration\nconst API_CONFIG = {\n  USER_ID: '636470',\n  API_KEY: 'f18878ae6d3e7627238b03d4d53999548576e4c1',\n  BASE_URL: 'https://json.astrologyapi.com/v1/varshaphal_yoga',\n  LANGUAGE: 'en'\n}\n\n// Mock Yoga Data Generator with More Comprehensive Data\nconst generateMockYogaData = (currentDate) => {\n  const yogaTypes = [\n    {\n      yog_name: 'Gajakesari Yoga',\n      is_yog_happening: Math.random() > 0.5,\n      description: 'A powerful yoga formed by the relationship between Moon and Jupiter',\n      planets: [['Moon', 'Jupiter']],\n      impact: 'Brings intelligence, wealth, and success in endeavors'\n    },\n    {\n      yog_name: 'Chandra Mangala Yoga',\n      is_yog_happening: Math.random() > 0.5,\n      description: 'Yoga formed by the combination of Moon and Mars',\n      planets: [['Moon', 'Mars']],\n      impact: 'Enhances emotional strength and determination'\n    },\n    {\n      yog_name: 'Ravi Yoga',\n      is_yog_happening: Math.random() > 0.5,\n      description: 'Yoga associated with the Sun\\'s influence',\n      planets: [['Sun']],\n      impact: 'Promotes leadership, confidence, and personal power'\n    },\n    {\n      yog_name: 'Budhaditya Yoga',\n      is_yog_happening: Math.random() > 0.5,\n      description: 'Combination of Mercury and Sun',\n      planets: [['Mercury', 'Sun']],\n      impact: 'Enhances communication skills and intellectual abilities'\n    }\n  ]\n\n  return yogaTypes.map(yoga => ({\n    ...yoga,\n    status: yoga.is_yog_happening ? 'Happening' : 'NotHappening'\n  }))\n}\n\n// Yoga Type Color and Icon Mapping\nconst YOGA_TYPE_STYLING = {\n  'Happening': { \n    color: 'bg-green-100 border-green-300', \n    textColor: 'text-green-800',\n    description: 'Active Yoga',\n    impact: 'Positive energy and favorable circumstances.'\n  },\n  'NotHappening': { \n    color: 'bg-gray-100 border-gray-300', \n    textColor: 'text-gray-800',\n    description: 'Inactive Yoga',\n    impact: 'Neutral or less active energy period.'\n  }\n}\n\nconst Yoga = ({ \n  panchangData, \n  selectedLocation = { latitude: 19.076, longitude: 72.877 }, \n  currentDate = new Date() \n}) => {\n  const [yogaData, setYogaData] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [debugInfo, setDebugInfo] = useState(null)\n\n  useEffect(() => {\n    const fetchYogaData = async () => {\n      // Calculate Varshaphal Year (Vedic Solar Year)\n      const vedaYear = currentDate.getMonth() >= 3 ? \n        currentDate.getFullYear() : \n        currentDate.getFullYear() - 1\n\n      const data = {\n        day: currentDate.getDate(),\n        month: currentDate.getMonth() + 1,\n        year: currentDate.getFullYear(),\n        hour: currentDate.getHours(),\n        min: currentDate.getMinutes(),\n        lat: selectedLocation.latitude,\n        lon: selectedLocation.longitude,\n        tzone: 5.5,\n        varshaphal_year: vedaYear  // Add Varshaphal Year\n      }\n\n      const auth = `Basic ${btoa(`${API_CONFIG.USER_ID}:${API_CONFIG.API_KEY}`)}`\n\n      try {\n        // Log detailed debug information\n        setDebugInfo({\n          requestData: data,\n          apiUrl: API_CONFIG.BASE_URL,\n          timestamp: new Date().toISOString()\n        })\n\n        console.log('Varshaphal Yoga API Request Details:', {\n          url: API_CONFIG.BASE_URL,\n          data,\n          headers: {\n            'Authorization': 'Basic [REDACTED]',\n            'Content-Type': 'application/json',\n            'Accept-Language': API_CONFIG.LANGUAGE\n          }\n        })\n\n        try {\n          const response = await axios.post(\n            API_CONFIG.BASE_URL,\n            data,\n            {\n              headers: {\n                'Authorization': auth,\n                'Content-Type': 'application/json',\n                'Accept-Language': API_CONFIG.LANGUAGE\n              },\n              timeout: 15000\n            }\n          )\n\n          console.log('Full Varshaphal Yoga API Response:', response)\n\n          if (response.data && Array.isArray(response.data)) {\n            // Process and filter yoga data\n            const processedYogaData = response.data.map(yoga => ({\n              ...yoga,\n              status: yoga.is_yog_happening ? 'Happening' : 'NotHappening'\n            }))\n\n            setYogaData(processedYogaData)\n            setDebugInfo(prev => ({\n              ...prev,\n              responseData: processedYogaData,\n              dataReceived: true\n            }))\n            setLoading(false)\n          } else {\n            throw new Error('Invalid Yoga data structure')\n          }\n        } catch (apiError) {\n          // If API call fails, generate mock data\n          console.warn('API request failed, falling back to mock data:', apiError)\n          \n          const mockData = generateMockYogaData(currentDate)\n          setYogaData(mockData)\n          \n          setDebugInfo(prev => ({\n            ...prev,\n            apiError: {\n              message: apiError.message,\n              status: apiError.response?.status,\n              errorResponse: apiError.response?.data,\n              fallbackUsed: true\n            }\n          }))\n          \n          setError({\n            message: 'Unable to retrieve Yoga data. Using mock data.',\n            details: apiError.response?.data || apiError.message\n          })\n          \n          setLoading(false)\n        }\n      } catch (err) {\n        console.error('Varshaphal Yoga API Error:', err)\n        \n        setDebugInfo(prev => ({\n          ...prev,\n          errorDetails: {\n            message: err.message,\n            code: err.response?.status,\n            responseData: err.response?.data\n          }\n        }))\n\n        // Generate mock data on any error\n        const mockData = generateMockYogaData(currentDate)\n        setYogaData(mockData)\n\n        setError({\n          message: 'Unable to retrieve Yoga data. Using mock data.',\n          details: err.response?.data || err.message\n        })\n        setLoading(false)\n      }\n    }\n\n    // Only fetch if panchangData is not available\n    if (!panchangData) {\n      fetchYogaData()\n    } else {\n      setLoading(false)\n    }\n  }, [panchangData, selectedLocation, currentDate])\n\n  if (loading) {\n    return (\n      <div className='w-full flex justify-center items-center py-12'>\n        <FaSpinner className='animate-spin text-4xl text-blue-500' />\n        <span className='ml-4 text-gray-600'>Loading Yoga data...</span>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className='w-full bg-red-50 border border-red-200 p-6 rounded-lg'>\n        <div className='flex items-center mb-4'>\n          <FaExclamationTriangle className='text-4xl text-red-500 mr-4' />\n          <div>\n            <h3 className='text-xl font-bold text-red-700'>Error Loading Yoga Data</h3>\n            <p className='text-red-600'>{error.message}</p>\n          </div>\n        </div>\n\n        <details className='bg-red-100 p-4 rounded-lg mt-4'>\n          <summary className='cursor-pointer text-red-700 font-semibold'>\n            View Detailed Error Information\n          </summary>\n          <pre className='text-xs text-red-800 mt-2 overflow-x-auto'>\n            {JSON.stringify(error.details, null, 2)}\n          </pre>\n        </details>\n\n        {debugInfo && (\n          <details className='bg-yellow-50 p-4 rounded-lg mt-4'>\n            <summary className='cursor-pointer text-yellow-700 font-semibold'>\n              Debug Information\n            </summary>\n            <pre className='text-xs text-yellow-800 mt-2 overflow-x-auto'>\n              {JSON.stringify(debugInfo, null, 2)}\n            </pre>\n          </details>\n        )}\n      </div>\n    )\n  }\n\n  // Use panchangData if available, otherwise use fetched data\n  const dataToRender = panchangData?.yoga || yogaData\n\n  if (!dataToRender || dataToRender.length === 0) {\n    return (\n      <div className='w-full bg-yellow-50 border border-yellow-200 p-6 rounded-lg text-center'>\n        <FaExclamationTriangle className='text-4xl text-yellow-500 mx-auto mb-4' />\n        <h3 className='text-xl font-bold text-yellow-700'>No Yoga Data Available</h3>\n        <p className='text-yellow-600'>Unable to retrieve Yoga information at this time.</p>\n        \n        {debugInfo && (\n          <details className='bg-gray-50 p-4 rounded-lg mt-4 text-left'>\n            <summary className='cursor-pointer text-gray-700 font-semibold'>\n              Debugging Details\n            </summary>\n            <pre className='text-xs text-gray-800 mt-2 overflow-x-auto'>\n              {JSON.stringify(debugInfo, null, 2)}\n            </pre>\n          </details>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div className='w-full space-y-6'>\n      <div className='bg-white shadow-lg rounded-2xl overflow-hidden'>\n        <div className='bg-gradient-to-r from-purple-500 to-indigo-600 p-4 text-white flex items-center'>\n          <FaStar className='mr-3 text-2xl' />\n          <h2 className='text-xl font-bold'>Varshaphal Yoga</h2>\n        </div>\n        <div className='p-4 space-y-3'>\n          {dataToRender.map((yoga, index) => {\n            const yogaStyle = YOGA_TYPE_STYLING[yoga.status] || YOGA_TYPE_STYLING.NotHappening\n            const YogaIcon = yogaStyle.icon || FaAsterisk\n\n            return (\n              <div \n                key={index} \n                className={`\n                  flex flex-col justify-between items-start \n                  p-4 rounded-lg border \n                  ${yogaStyle.color} ${yogaStyle.textColor}\n                  transition-all duration-300 \n                  hover:shadow-lg\n                `}\n              >\n                <div className='flex items-center mb-2 w-full'>\n                  <YogaIcon className='mr-3 opacity-70' />\n                  <h4 className='font-bold text-lg flex-grow'>{yoga.yog_name || yoga.name}</h4>\n                  <span className={`\n                    px-3 py-1 rounded-full text-xs font-semibold\n                    ${yoga.is_yog_happening \n                      ? 'bg-green-200 text-green-800' \n                      : 'bg-gray-200 text-gray-800'\n                    }\n                  `}>\n                    {yoga.is_yog_happening ? 'Active' : 'Inactive'}\n                  </span>\n                </div>\n\n                <div className='w-full mt-2'>\n                  <p className='text-sm opacity-80'>\n                    {yogaStyle.description}\n                  </p>\n                  <p className='text-xs opacity-70 mt-1'>\n                    {yogaStyle.impact}\n                  </p>\n                </div>\n\n                {yoga.planets && yoga.planets.length > 0 && (\n                  <div className='mt-2 w-full'>\n                    <h5 className='text-sm font-semibold mb-1'>Involved Planets:</h5>\n                    <div className='flex flex-wrap gap-2'>\n                      {yoga.planets.map((planetPair, pairIndex) => (\n                        <span \n                          key={pairIndex} \n                          className='\n                            bg-white/20 px-2 py-1 rounded-md \n                            text-xs font-medium\n                          '\n                        >\n                          {Array.isArray(planetPair) \n                            ? planetPair.filter(p => p).join(' - ') \n                            : planetPair}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Yoga"],"names":["API_CONFIG","generateMockYogaData","currentDate","yog_name","is_yog_happening","Math","random","description","planets","impact","map","yoga","_objectSpread","status","YOGA_TYPE_STYLING","color","textColor","_ref","panchangData","selectedLocation","latitude","longitude","Date","yogaData","setYogaData","useState","loading","setLoading","error","setError","debugInfo","setDebugInfo","useEffect","async","vedaYear","getMonth","getFullYear","data","day","getDate","month","year","hour","getHours","min","getMinutes","lat","lon","tzone","varshaphal_year","auth","concat","btoa","requestData","apiUrl","timestamp","toISOString","console","log","url","headers","response","axios","post","timeout","Array","isArray","Error","processedYogaData","prev","responseData","dataReceived","apiError","_apiError$response3","warn","mockData","_apiError$response","_apiError$response2","message","errorResponse","fallbackUsed","details","err","_err$response3","_err$response","_err$response2","errorDetails","code","fetchYogaData","_jsxs","className","children","_jsx","FaSpinner","FaExclamationTriangle","JSON","stringify","dataToRender","length","FaStar","index","yogaStyle","NotHappening","YogaIcon","icon","FaAsterisk","name","planetPair","pairIndex","filter","p","join"],"sourceRoot":""}